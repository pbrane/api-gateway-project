/*
 * RMA_RestAPI_Design_1
 * Customer Requirements from Excel Document RMA_RestAPI_Design 1.xlsx
 *
 * OpenAPI spec version: 0.0.6
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Attachment;
import io.swagger.client.model.Error;
import java.io.File;
import io.swagger.client.model.InlineResponse201;
import io.swagger.client.model.Note;
import io.swagger.client.model.NoteCreate;
import org.threeten.bp.OffsetDateTime;
import io.swagger.client.model.TacCase;
import io.swagger.client.model.TacCaseCreate;
import io.swagger.client.model.TacCaseStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TacCaseApi {
    private ApiClient apiClient;

    public TacCaseApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TacCaseApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createTacCase
     * @param body The TroubleTicket to be created (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTacCaseCall(TacCaseCreate body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/tacCases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTacCaseValidateBeforeCall(TacCaseCreate body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createTacCase(Async)");
        }
        
        com.squareup.okhttp.Call call = createTacCaseCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a TAC Case
     * This operation creates a tacCase entity.
     * @param body The TroubleTicket to be created (required)
     * @return TacCase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TacCase createTacCase(TacCaseCreate body) throws ApiException {
        ApiResponse<TacCase> resp = createTacCaseWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Creates a TAC Case
     * This operation creates a tacCase entity.
     * @param body The TroubleTicket to be created (required)
     * @return ApiResponse&lt;TacCase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TacCase> createTacCaseWithHttpInfo(TacCaseCreate body) throws ApiException {
        com.squareup.okhttp.Call call = createTacCaseValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<TacCase>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a TAC Case (asynchronously)
     * This operation creates a tacCase entity.
     * @param body The TroubleTicket to be created (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTacCaseAsync(TacCaseCreate body, final ApiCallback<TacCase> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTacCaseValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TacCase>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createTacCaseNote
     * @param body The TroubleTicket to be created (required)
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTacCaseNoteCall(NoteCreate body, String caseNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/tacCases/{caseNumber}/notes"
            .replaceAll("\\{" + "caseNumber" + "\\}", apiClient.escapeString(caseNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTacCaseNoteValidateBeforeCall(NoteCreate body, String caseNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createTacCaseNote(Async)");
        }
        // verify the required parameter 'caseNumber' is set
        if (caseNumber == null) {
            throw new ApiException("Missing the required parameter 'caseNumber' when calling createTacCaseNote(Async)");
        }
        
        com.squareup.okhttp.Call call = createTacCaseNoteCall(body, caseNumber, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a note assocated with a TAC Case
     * This operation creates adds a Case Note to a TAC Case
     * @param body The TroubleTicket to be created (required)
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Note createTacCaseNote(NoteCreate body, String caseNumber) throws ApiException {
        ApiResponse<Note> resp = createTacCaseNoteWithHttpInfo(body, caseNumber);
        return resp.getData();
    }

    /**
     * Creates a note assocated with a TAC Case
     * This operation creates adds a Case Note to a TAC Case
     * @param body The TroubleTicket to be created (required)
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Note> createTacCaseNoteWithHttpInfo(NoteCreate body, String caseNumber) throws ApiException {
        com.squareup.okhttp.Call call = createTacCaseNoteValidateBeforeCall(body, caseNumber, null, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a note assocated with a TAC Case (asynchronously)
     * This operation creates adds a Case Note to a TAC Case
     * @param body The TroubleTicket to be created (required)
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTacCaseNoteAsync(NoteCreate body, String caseNumber, final ApiCallback<Note> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTacCaseNoteValidateBeforeCall(body, caseNumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTacCaseAttachments
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param offset Requested index for start of items to be provided in response (optional)
     * @param limit Requested number of items to be provided in response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTacCaseAttachmentsCall(String caseNumber, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tacCases/{caseNumber}/attachments"
            .replaceAll("\\{" + "caseNumber" + "\\}", apiClient.escapeString(caseNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTacCaseAttachmentsValidateBeforeCall(String caseNumber, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'caseNumber' is set
        if (caseNumber == null) {
            throw new ApiException("Missing the required parameter 'caseNumber' when calling getTacCaseAttachments(Async)");
        }
        
        com.squareup.okhttp.Call call = getTacCaseAttachmentsCall(caseNumber, offset, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a list of attachments for a specific TAC case
     * 
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param offset Requested index for start of items to be provided in response (optional)
     * @param limit Requested number of items to be provided in response (optional)
     * @return List&lt;Attachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Attachment> getTacCaseAttachments(String caseNumber, Integer offset, Integer limit) throws ApiException {
        ApiResponse<List<Attachment>> resp = getTacCaseAttachmentsWithHttpInfo(caseNumber, offset, limit);
        return resp.getData();
    }

    /**
     * Get a list of attachments for a specific TAC case
     * 
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param offset Requested index for start of items to be provided in response (optional)
     * @param limit Requested number of items to be provided in response (optional)
     * @return ApiResponse&lt;List&lt;Attachment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Attachment>> getTacCaseAttachmentsWithHttpInfo(String caseNumber, Integer offset, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getTacCaseAttachmentsValidateBeforeCall(caseNumber, offset, limit, null, null);
        Type localVarReturnType = new TypeToken<List<Attachment>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of attachments for a specific TAC case (asynchronously)
     * 
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param offset Requested index for start of items to be provided in response (optional)
     * @param limit Requested number of items to be provided in response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTacCaseAttachmentsAsync(String caseNumber, Integer offset, Integer limit, final ApiCallback<List<Attachment>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTacCaseAttachmentsValidateBeforeCall(caseNumber, offset, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Attachment>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTacCaseNotes
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param offset Requested index for start of items to be provided in response (optional)
     * @param limit Requested number of items to be provided in response (optional)
     * @param createdFrom Beginning date portion of a date range query to search for a matching set of items (optional)
     * @param createdTo Ending date portion of a date range query to search for a matching set of items (optional)
     * @param createdSince Retrieve the set of items created since this date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTacCaseNotesCall(String caseNumber, Integer offset, Integer limit, OffsetDateTime createdFrom, OffsetDateTime createdTo, OffsetDateTime createdSince, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tacCases/{caseNumber}/notes"
            .replaceAll("\\{" + "caseNumber" + "\\}", apiClient.escapeString(caseNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (createdFrom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdFrom", createdFrom));
        if (createdTo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdTo", createdTo));
        if (createdSince != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdSince", createdSince));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTacCaseNotesValidateBeforeCall(String caseNumber, Integer offset, Integer limit, OffsetDateTime createdFrom, OffsetDateTime createdTo, OffsetDateTime createdSince, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'caseNumber' is set
        if (caseNumber == null) {
            throw new ApiException("Missing the required parameter 'caseNumber' when calling getTacCaseNotes(Async)");
        }
        
        com.squareup.okhttp.Call call = getTacCaseNotesCall(caseNumber, offset, limit, createdFrom, createdTo, createdSince, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get notes for a specific TAC Case
     * Retrieve a list of notes attached to a specific item by its TAC Case Number.
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param offset Requested index for start of items to be provided in response (optional)
     * @param limit Requested number of items to be provided in response (optional)
     * @param createdFrom Beginning date portion of a date range query to search for a matching set of items (optional)
     * @param createdTo Ending date portion of a date range query to search for a matching set of items (optional)
     * @param createdSince Retrieve the set of items created since this date (optional)
     * @return List&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Note> getTacCaseNotes(String caseNumber, Integer offset, Integer limit, OffsetDateTime createdFrom, OffsetDateTime createdTo, OffsetDateTime createdSince) throws ApiException {
        ApiResponse<List<Note>> resp = getTacCaseNotesWithHttpInfo(caseNumber, offset, limit, createdFrom, createdTo, createdSince);
        return resp.getData();
    }

    /**
     * Get notes for a specific TAC Case
     * Retrieve a list of notes attached to a specific item by its TAC Case Number.
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param offset Requested index for start of items to be provided in response (optional)
     * @param limit Requested number of items to be provided in response (optional)
     * @param createdFrom Beginning date portion of a date range query to search for a matching set of items (optional)
     * @param createdTo Ending date portion of a date range query to search for a matching set of items (optional)
     * @param createdSince Retrieve the set of items created since this date (optional)
     * @return ApiResponse&lt;List&lt;Note&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Note>> getTacCaseNotesWithHttpInfo(String caseNumber, Integer offset, Integer limit, OffsetDateTime createdFrom, OffsetDateTime createdTo, OffsetDateTime createdSince) throws ApiException {
        com.squareup.okhttp.Call call = getTacCaseNotesValidateBeforeCall(caseNumber, offset, limit, createdFrom, createdTo, createdSince, null, null);
        Type localVarReturnType = new TypeToken<List<Note>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get notes for a specific TAC Case (asynchronously)
     * Retrieve a list of notes attached to a specific item by its TAC Case Number.
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param offset Requested index for start of items to be provided in response (optional)
     * @param limit Requested number of items to be provided in response (optional)
     * @param createdFrom Beginning date portion of a date range query to search for a matching set of items (optional)
     * @param createdTo Ending date portion of a date range query to search for a matching set of items (optional)
     * @param createdSince Retrieve the set of items created since this date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTacCaseNotesAsync(String caseNumber, Integer offset, Integer limit, OffsetDateTime createdFrom, OffsetDateTime createdTo, OffsetDateTime createdSince, final ApiCallback<List<Note>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTacCaseNotesValidateBeforeCall(caseNumber, offset, limit, createdFrom, createdTo, createdSince, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Note>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listTacCases
     * @param fields Comma-separated properties to be provided in response (optional)
     * @param offset Requested index for start of items to be provided in response (optional)
     * @param limit Requested number of items to be provided in response (optional)
     * @param createdFrom Beginning date portion of a date range query to search for a matching set of items (optional)
     * @param createdTo Ending date portion of a date range query to search for a matching set of items (optional)
     * @param createdSince Retrieve the set of items created since this date (optional)
     * @param caseStatus Retrieve the set of cases with this status (optional)
     * @param includeNotes Use this flag to include Case Notes (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listTacCasesCall(String fields, Integer offset, Integer limit, OffsetDateTime createdFrom, OffsetDateTime createdTo, OffsetDateTime createdSince, TacCaseStatus caseStatus, Boolean includeNotes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tacCases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (createdFrom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdFrom", createdFrom));
        if (createdTo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdTo", createdTo));
        if (createdSince != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdSince", createdSince));
        if (caseStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("caseStatus", caseStatus));
        if (includeNotes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeNotes", includeNotes));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listTacCasesValidateBeforeCall(String fields, Integer offset, Integer limit, OffsetDateTime createdFrom, OffsetDateTime createdTo, OffsetDateTime createdSince, TacCaseStatus caseStatus, Boolean includeNotes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listTacCasesCall(fields, offset, limit, createdFrom, createdTo, createdSince, caseStatus, includeNotes, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List or find TAC Cases
     * This operation list or find TACCase entities
     * @param fields Comma-separated properties to be provided in response (optional)
     * @param offset Requested index for start of items to be provided in response (optional)
     * @param limit Requested number of items to be provided in response (optional)
     * @param createdFrom Beginning date portion of a date range query to search for a matching set of items (optional)
     * @param createdTo Ending date portion of a date range query to search for a matching set of items (optional)
     * @param createdSince Retrieve the set of items created since this date (optional)
     * @param caseStatus Retrieve the set of cases with this status (optional)
     * @param includeNotes Use this flag to include Case Notes (optional, default to false)
     * @return List&lt;TacCase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TacCase> listTacCases(String fields, Integer offset, Integer limit, OffsetDateTime createdFrom, OffsetDateTime createdTo, OffsetDateTime createdSince, TacCaseStatus caseStatus, Boolean includeNotes) throws ApiException {
        ApiResponse<List<TacCase>> resp = listTacCasesWithHttpInfo(fields, offset, limit, createdFrom, createdTo, createdSince, caseStatus, includeNotes);
        return resp.getData();
    }

    /**
     * List or find TAC Cases
     * This operation list or find TACCase entities
     * @param fields Comma-separated properties to be provided in response (optional)
     * @param offset Requested index for start of items to be provided in response (optional)
     * @param limit Requested number of items to be provided in response (optional)
     * @param createdFrom Beginning date portion of a date range query to search for a matching set of items (optional)
     * @param createdTo Ending date portion of a date range query to search for a matching set of items (optional)
     * @param createdSince Retrieve the set of items created since this date (optional)
     * @param caseStatus Retrieve the set of cases with this status (optional)
     * @param includeNotes Use this flag to include Case Notes (optional, default to false)
     * @return ApiResponse&lt;List&lt;TacCase&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TacCase>> listTacCasesWithHttpInfo(String fields, Integer offset, Integer limit, OffsetDateTime createdFrom, OffsetDateTime createdTo, OffsetDateTime createdSince, TacCaseStatus caseStatus, Boolean includeNotes) throws ApiException {
        com.squareup.okhttp.Call call = listTacCasesValidateBeforeCall(fields, offset, limit, createdFrom, createdTo, createdSince, caseStatus, includeNotes, null, null);
        Type localVarReturnType = new TypeToken<List<TacCase>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List or find TAC Cases (asynchronously)
     * This operation list or find TACCase entities
     * @param fields Comma-separated properties to be provided in response (optional)
     * @param offset Requested index for start of items to be provided in response (optional)
     * @param limit Requested number of items to be provided in response (optional)
     * @param createdFrom Beginning date portion of a date range query to search for a matching set of items (optional)
     * @param createdTo Ending date portion of a date range query to search for a matching set of items (optional)
     * @param createdSince Retrieve the set of items created since this date (optional)
     * @param caseStatus Retrieve the set of cases with this status (optional)
     * @param includeNotes Use this flag to include Case Notes (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTacCasesAsync(String fields, Integer offset, Integer limit, OffsetDateTime createdFrom, OffsetDateTime createdTo, OffsetDateTime createdSince, TacCaseStatus caseStatus, Boolean includeNotes, final ApiCallback<List<TacCase>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTacCasesValidateBeforeCall(fields, offset, limit, createdFrom, createdTo, createdSince, caseStatus, includeNotes, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TacCase>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveTacCase
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param fields Comma-separated properties to be provided in response (optional)
     * @param includeNotes Use this flag to include Case Notes (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveTacCaseCall(String caseNumber, String fields, Boolean includeNotes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tacCases/{caseNumber}"
            .replaceAll("\\{" + "caseNumber" + "\\}", apiClient.escapeString(caseNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (includeNotes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeNotes", includeNotes));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveTacCaseValidateBeforeCall(String caseNumber, String fields, Boolean includeNotes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'caseNumber' is set
        if (caseNumber == null) {
            throw new ApiException("Missing the required parameter 'caseNumber' when calling retrieveTacCase(Async)");
        }
        
        com.squareup.okhttp.Call call = retrieveTacCaseCall(caseNumber, fields, includeNotes, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves a TAC Case by ID
     * This operation retrieves a tacCase entity. Attribute selection is enabled for all first level attributes.
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param fields Comma-separated properties to be provided in response (optional)
     * @param includeNotes Use this flag to include Case Notes (optional, default to false)
     * @return TacCase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TacCase retrieveTacCase(String caseNumber, String fields, Boolean includeNotes) throws ApiException {
        ApiResponse<TacCase> resp = retrieveTacCaseWithHttpInfo(caseNumber, fields, includeNotes);
        return resp.getData();
    }

    /**
     * Retrieves a TAC Case by ID
     * This operation retrieves a tacCase entity. Attribute selection is enabled for all first level attributes.
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param fields Comma-separated properties to be provided in response (optional)
     * @param includeNotes Use this flag to include Case Notes (optional, default to false)
     * @return ApiResponse&lt;TacCase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TacCase> retrieveTacCaseWithHttpInfo(String caseNumber, String fields, Boolean includeNotes) throws ApiException {
        com.squareup.okhttp.Call call = retrieveTacCaseValidateBeforeCall(caseNumber, fields, includeNotes, null, null);
        Type localVarReturnType = new TypeToken<TacCase>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves a TAC Case by ID (asynchronously)
     * This operation retrieves a tacCase entity. Attribute selection is enabled for all first level attributes.
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param fields Comma-separated properties to be provided in response (optional)
     * @param includeNotes Use this flag to include Case Notes (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveTacCaseAsync(String caseNumber, String fields, Boolean includeNotes, final ApiCallback<TacCase> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveTacCaseValidateBeforeCall(caseNumber, fields, includeNotes, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TacCase>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveTacCaseAttachment
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param id The unique identifier of an entity. (required)
     * @param fields Comma-separated properties to be provided in response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveTacCaseAttachmentCall(String caseNumber, String id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tacCases/{caseNumber}/attachments/{id}"
            .replaceAll("\\{" + "caseNumber" + "\\}", apiClient.escapeString(caseNumber.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveTacCaseAttachmentValidateBeforeCall(String caseNumber, String id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'caseNumber' is set
        if (caseNumber == null) {
            throw new ApiException("Missing the required parameter 'caseNumber' when calling retrieveTacCaseAttachment(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retrieveTacCaseAttachment(Async)");
        }
        
        com.squareup.okhttp.Call call = retrieveTacCaseAttachmentCall(caseNumber, id, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves a TAC Case Attachment by ID
     * This operation retrieves an TAC Case Attachment
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param id The unique identifier of an entity. (required)
     * @param fields Comma-separated properties to be provided in response (optional)
     * @return List&lt;Attachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Attachment> retrieveTacCaseAttachment(String caseNumber, String id, String fields) throws ApiException {
        ApiResponse<List<Attachment>> resp = retrieveTacCaseAttachmentWithHttpInfo(caseNumber, id, fields);
        return resp.getData();
    }

    /**
     * Retrieves a TAC Case Attachment by ID
     * This operation retrieves an TAC Case Attachment
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param id The unique identifier of an entity. (required)
     * @param fields Comma-separated properties to be provided in response (optional)
     * @return ApiResponse&lt;List&lt;Attachment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Attachment>> retrieveTacCaseAttachmentWithHttpInfo(String caseNumber, String id, String fields) throws ApiException {
        com.squareup.okhttp.Call call = retrieveTacCaseAttachmentValidateBeforeCall(caseNumber, id, fields, null, null);
        Type localVarReturnType = new TypeToken<List<Attachment>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves a TAC Case Attachment by ID (asynchronously)
     * This operation retrieves an TAC Case Attachment
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param id The unique identifier of an entity. (required)
     * @param fields Comma-separated properties to be provided in response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveTacCaseAttachmentAsync(String caseNumber, String id, String fields, final ApiCallback<List<Attachment>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveTacCaseAttachmentValidateBeforeCall(caseNumber, id, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Attachment>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveTacCaseNote
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param id The unique identifier of an entity. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveTacCaseNoteCall(String caseNumber, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tacCases/{caseNumber}/notes/{id}"
            .replaceAll("\\{" + "caseNumber" + "\\}", apiClient.escapeString(caseNumber.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveTacCaseNoteValidateBeforeCall(String caseNumber, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'caseNumber' is set
        if (caseNumber == null) {
            throw new ApiException("Missing the required parameter 'caseNumber' when calling retrieveTacCaseNote(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retrieveTacCaseNote(Async)");
        }
        
        com.squareup.okhttp.Call call = retrieveTacCaseNoteCall(caseNumber, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves a TAC Case Note by ID
     * This operation retrieves a CaseNote entity. Attribute selection is enabled for all first level attributes.
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param id The unique identifier of an entity. (required)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Note retrieveTacCaseNote(String caseNumber, String id) throws ApiException {
        ApiResponse<Note> resp = retrieveTacCaseNoteWithHttpInfo(caseNumber, id);
        return resp.getData();
    }

    /**
     * Retrieves a TAC Case Note by ID
     * This operation retrieves a CaseNote entity. Attribute selection is enabled for all first level attributes.
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param id The unique identifier of an entity. (required)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Note> retrieveTacCaseNoteWithHttpInfo(String caseNumber, String id) throws ApiException {
        com.squareup.okhttp.Call call = retrieveTacCaseNoteValidateBeforeCall(caseNumber, id, null, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves a TAC Case Note by ID (asynchronously)
     * This operation retrieves a CaseNote entity. Attribute selection is enabled for all first level attributes.
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param id The unique identifier of an entity. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveTacCaseNoteAsync(String caseNumber, String id, final ApiCallback<Note> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveTacCaseNoteValidateBeforeCall(caseNumber, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTacCase
     * @param body Updated the associated TAC Case (required)
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTacCaseCall(TacCase body, String caseNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/tacCases/{caseNumber}"
            .replaceAll("\\{" + "caseNumber" + "\\}", apiClient.escapeString(caseNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTacCaseValidateBeforeCall(TacCase body, String caseNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateTacCase(Async)");
        }
        // verify the required parameter 'caseNumber' is set
        if (caseNumber == null) {
            throw new ApiException("Missing the required parameter 'caseNumber' when calling updateTacCase(Async)");
        }
        
        com.squareup.okhttp.Call call = updateTacCaseCall(body, caseNumber, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates a TAC Case by ID
     * This operation updates a tacCase entity. Attribute selection is enabled for all first level attributes.
     * @param body Updated the associated TAC Case (required)
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateTacCase(TacCase body, String caseNumber) throws ApiException {
        updateTacCaseWithHttpInfo(body, caseNumber);
    }

    /**
     * Updates a TAC Case by ID
     * This operation updates a tacCase entity. Attribute selection is enabled for all first level attributes.
     * @param body Updated the associated TAC Case (required)
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateTacCaseWithHttpInfo(TacCase body, String caseNumber) throws ApiException {
        com.squareup.okhttp.Call call = updateTacCaseValidateBeforeCall(body, caseNumber, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates a TAC Case by ID (asynchronously)
     * This operation updates a tacCase entity. Attribute selection is enabled for all first level attributes.
     * @param body Updated the associated TAC Case (required)
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTacCaseAsync(TacCase body, String caseNumber, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTacCaseValidateBeforeCall(body, caseNumber, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateTacCaseNote
     * @param body Updated the associated TAC Case (required)
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param id The unique identifier of an entity. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTacCaseNoteCall(Note body, String caseNumber, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/tacCases/{caseNumber}/notes/{id}"
            .replaceAll("\\{" + "caseNumber" + "\\}", apiClient.escapeString(caseNumber.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTacCaseNoteValidateBeforeCall(Note body, String caseNumber, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateTacCaseNote(Async)");
        }
        // verify the required parameter 'caseNumber' is set
        if (caseNumber == null) {
            throw new ApiException("Missing the required parameter 'caseNumber' when calling updateTacCaseNote(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateTacCaseNote(Async)");
        }
        
        com.squareup.okhttp.Call call = updateTacCaseNoteCall(body, caseNumber, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates a TAC Case Note by ID
     * This operation updates a TAC Case Note. Attribute selection is enabled for all first level attributes.
     * @param body Updated the associated TAC Case (required)
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param id The unique identifier of an entity. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateTacCaseNote(Note body, String caseNumber, String id) throws ApiException {
        updateTacCaseNoteWithHttpInfo(body, caseNumber, id);
    }

    /**
     * Updates a TAC Case Note by ID
     * This operation updates a TAC Case Note. Attribute selection is enabled for all first level attributes.
     * @param body Updated the associated TAC Case (required)
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param id The unique identifier of an entity. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateTacCaseNoteWithHttpInfo(Note body, String caseNumber, String id) throws ApiException {
        com.squareup.okhttp.Call call = updateTacCaseNoteValidateBeforeCall(body, caseNumber, id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates a TAC Case Note by ID (asynchronously)
     * This operation updates a TAC Case Note. Attribute selection is enabled for all first level attributes.
     * @param body Updated the associated TAC Case (required)
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param id The unique identifier of an entity. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTacCaseNoteAsync(Note body, String caseNumber, String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTacCaseNoteValidateBeforeCall(body, caseNumber, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for uploadTacCaseAttachment
     * @param file  (required)
     * @param description  (required)
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadTacCaseAttachmentCall(File file, String description, String caseNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tacCases/{caseNumber}/attachments"
            .replaceAll("\\{" + "caseNumber" + "\\}", apiClient.escapeString(caseNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);
        if (description != null)
        localVarFormParams.put("description", description);

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadTacCaseAttachmentValidateBeforeCall(File file, String description, String caseNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling uploadTacCaseAttachment(Async)");
        }
        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling uploadTacCaseAttachment(Async)");
        }
        // verify the required parameter 'caseNumber' is set
        if (caseNumber == null) {
            throw new ApiException("Missing the required parameter 'caseNumber' when calling uploadTacCaseAttachment(Async)");
        }
        
        com.squareup.okhttp.Call call = uploadTacCaseAttachmentCall(file, description, caseNumber, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Upload an attachment to a specific TAC case
     * 
     * @param file  (required)
     * @param description  (required)
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @return InlineResponse201
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse201 uploadTacCaseAttachment(File file, String description, String caseNumber) throws ApiException {
        ApiResponse<InlineResponse201> resp = uploadTacCaseAttachmentWithHttpInfo(file, description, caseNumber);
        return resp.getData();
    }

    /**
     * Upload an attachment to a specific TAC case
     * 
     * @param file  (required)
     * @param description  (required)
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @return ApiResponse&lt;InlineResponse201&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse201> uploadTacCaseAttachmentWithHttpInfo(File file, String description, String caseNumber) throws ApiException {
        com.squareup.okhttp.Call call = uploadTacCaseAttachmentValidateBeforeCall(file, description, caseNumber, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse201>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload an attachment to a specific TAC case (asynchronously)
     * 
     * @param file  (required)
     * @param description  (required)
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadTacCaseAttachmentAsync(File file, String description, String caseNumber, final ApiCallback<InlineResponse201> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadTacCaseAttachmentValidateBeforeCall(file, description, caseNumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse201>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
