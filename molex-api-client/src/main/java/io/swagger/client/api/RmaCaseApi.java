/*
 * RMA_RestAPI_Design_1
 * Customer Requirements from Excel Document RMA_RestAPI_Design 1.xlsx
 *
 * OpenAPI spec version: 0.0.6
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Attachment;
import io.swagger.client.model.Error;
import java.io.File;
import io.swagger.client.model.InlineResponse201;
import io.swagger.client.model.Note;
import io.swagger.client.model.NoteCreate;
import org.threeten.bp.OffsetDateTime;
import io.swagger.client.model.RmaCase;
import io.swagger.client.model.RmaCaseCreate;
import io.swagger.client.model.TacCaseStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RmaCaseApi {
    private ApiClient apiClient;

    public RmaCaseApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RmaCaseApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createRmaCaseNote
     * @param body The TroubleTicket to be created (required)
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createRmaCaseNoteCall(NoteCreate body, String caseNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/rmaCases/{caseNumber}/notes"
            .replaceAll("\\{" + "caseNumber" + "\\}", apiClient.escapeString(caseNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createRmaCaseNoteValidateBeforeCall(NoteCreate body, String caseNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createRmaCaseNote(Async)");
        }
        // verify the required parameter 'caseNumber' is set
        if (caseNumber == null) {
            throw new ApiException("Missing the required parameter 'caseNumber' when calling createRmaCaseNote(Async)");
        }
        
        com.squareup.okhttp.Call call = createRmaCaseNoteCall(body, caseNumber, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a note assocated with a RMA Case
     * This operation creates adds a Case Note to a TAC Case
     * @param body The TroubleTicket to be created (required)
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Note createRmaCaseNote(NoteCreate body, String caseNumber) throws ApiException {
        ApiResponse<Note> resp = createRmaCaseNoteWithHttpInfo(body, caseNumber);
        return resp.getData();
    }

    /**
     * Creates a note assocated with a RMA Case
     * This operation creates adds a Case Note to a TAC Case
     * @param body The TroubleTicket to be created (required)
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Note> createRmaCaseNoteWithHttpInfo(NoteCreate body, String caseNumber) throws ApiException {
        com.squareup.okhttp.Call call = createRmaCaseNoteValidateBeforeCall(body, caseNumber, null, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a note assocated with a RMA Case (asynchronously)
     * This operation creates adds a Case Note to a TAC Case
     * @param body The TroubleTicket to be created (required)
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createRmaCaseNoteAsync(NoteCreate body, String caseNumber, final ApiCallback<Note> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createRmaCaseNoteValidateBeforeCall(body, caseNumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createTacRma
     * @param body The TroubleTicket to be created (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTacRmaCall(RmaCaseCreate body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/rmaCases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTacRmaValidateBeforeCall(RmaCaseCreate body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createTacRma(Async)");
        }
        
        com.squareup.okhttp.Call call = createTacRmaCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates an RMA
     * This operation creates a tacRma entity.
     * @param body The TroubleTicket to be created (required)
     * @return RmaCase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RmaCase createTacRma(RmaCaseCreate body) throws ApiException {
        ApiResponse<RmaCase> resp = createTacRmaWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Creates an RMA
     * This operation creates a tacRma entity.
     * @param body The TroubleTicket to be created (required)
     * @return ApiResponse&lt;RmaCase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RmaCase> createTacRmaWithHttpInfo(RmaCaseCreate body) throws ApiException {
        com.squareup.okhttp.Call call = createTacRmaValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<RmaCase>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates an RMA (asynchronously)
     * This operation creates a tacRma entity.
     * @param body The TroubleTicket to be created (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTacRmaAsync(RmaCaseCreate body, final ApiCallback<RmaCase> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTacRmaValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RmaCase>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRmaCaseAttachments
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param offset Requested index for start of items to be provided in response (optional)
     * @param limit Requested number of items to be provided in response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRmaCaseAttachmentsCall(String caseNumber, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/rmaCases/{caseNumber}/attachments"
            .replaceAll("\\{" + "caseNumber" + "\\}", apiClient.escapeString(caseNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRmaCaseAttachmentsValidateBeforeCall(String caseNumber, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'caseNumber' is set
        if (caseNumber == null) {
            throw new ApiException("Missing the required parameter 'caseNumber' when calling getRmaCaseAttachments(Async)");
        }
        
        com.squareup.okhttp.Call call = getRmaCaseAttachmentsCall(caseNumber, offset, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a list of attachments for a specific RMA case
     * 
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param offset Requested index for start of items to be provided in response (optional)
     * @param limit Requested number of items to be provided in response (optional)
     * @return List&lt;Attachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Attachment> getRmaCaseAttachments(String caseNumber, Integer offset, Integer limit) throws ApiException {
        ApiResponse<List<Attachment>> resp = getRmaCaseAttachmentsWithHttpInfo(caseNumber, offset, limit);
        return resp.getData();
    }

    /**
     * Get a list of attachments for a specific RMA case
     * 
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param offset Requested index for start of items to be provided in response (optional)
     * @param limit Requested number of items to be provided in response (optional)
     * @return ApiResponse&lt;List&lt;Attachment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Attachment>> getRmaCaseAttachmentsWithHttpInfo(String caseNumber, Integer offset, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getRmaCaseAttachmentsValidateBeforeCall(caseNumber, offset, limit, null, null);
        Type localVarReturnType = new TypeToken<List<Attachment>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of attachments for a specific RMA case (asynchronously)
     * 
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param offset Requested index for start of items to be provided in response (optional)
     * @param limit Requested number of items to be provided in response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRmaCaseAttachmentsAsync(String caseNumber, Integer offset, Integer limit, final ApiCallback<List<Attachment>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRmaCaseAttachmentsValidateBeforeCall(caseNumber, offset, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Attachment>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRmaCaseNotes
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param offset Requested index for start of items to be provided in response (optional)
     * @param limit Requested number of items to be provided in response (optional)
     * @param createdFrom Beginning date portion of a date range query to search for a matching set of items (optional)
     * @param createdTo Ending date portion of a date range query to search for a matching set of items (optional)
     * @param createdSince Retrieve the set of items created since this date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRmaCaseNotesCall(String caseNumber, Integer offset, Integer limit, OffsetDateTime createdFrom, OffsetDateTime createdTo, OffsetDateTime createdSince, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/rmaCases/{caseNumber}/notes"
            .replaceAll("\\{" + "caseNumber" + "\\}", apiClient.escapeString(caseNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (createdFrom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdFrom", createdFrom));
        if (createdTo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdTo", createdTo));
        if (createdSince != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdSince", createdSince));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRmaCaseNotesValidateBeforeCall(String caseNumber, Integer offset, Integer limit, OffsetDateTime createdFrom, OffsetDateTime createdTo, OffsetDateTime createdSince, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'caseNumber' is set
        if (caseNumber == null) {
            throw new ApiException("Missing the required parameter 'caseNumber' when calling getRmaCaseNotes(Async)");
        }
        
        com.squareup.okhttp.Call call = getRmaCaseNotesCall(caseNumber, offset, limit, createdFrom, createdTo, createdSince, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get notes for a specific RMA
     * Retrieve a list of notes attached to a specific RMA Case by its case number.
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param offset Requested index for start of items to be provided in response (optional)
     * @param limit Requested number of items to be provided in response (optional)
     * @param createdFrom Beginning date portion of a date range query to search for a matching set of items (optional)
     * @param createdTo Ending date portion of a date range query to search for a matching set of items (optional)
     * @param createdSince Retrieve the set of items created since this date (optional)
     * @return List&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Note> getRmaCaseNotes(String caseNumber, Integer offset, Integer limit, OffsetDateTime createdFrom, OffsetDateTime createdTo, OffsetDateTime createdSince) throws ApiException {
        ApiResponse<List<Note>> resp = getRmaCaseNotesWithHttpInfo(caseNumber, offset, limit, createdFrom, createdTo, createdSince);
        return resp.getData();
    }

    /**
     * Get notes for a specific RMA
     * Retrieve a list of notes attached to a specific RMA Case by its case number.
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param offset Requested index for start of items to be provided in response (optional)
     * @param limit Requested number of items to be provided in response (optional)
     * @param createdFrom Beginning date portion of a date range query to search for a matching set of items (optional)
     * @param createdTo Ending date portion of a date range query to search for a matching set of items (optional)
     * @param createdSince Retrieve the set of items created since this date (optional)
     * @return ApiResponse&lt;List&lt;Note&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Note>> getRmaCaseNotesWithHttpInfo(String caseNumber, Integer offset, Integer limit, OffsetDateTime createdFrom, OffsetDateTime createdTo, OffsetDateTime createdSince) throws ApiException {
        com.squareup.okhttp.Call call = getRmaCaseNotesValidateBeforeCall(caseNumber, offset, limit, createdFrom, createdTo, createdSince, null, null);
        Type localVarReturnType = new TypeToken<List<Note>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get notes for a specific RMA (asynchronously)
     * Retrieve a list of notes attached to a specific RMA Case by its case number.
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param offset Requested index for start of items to be provided in response (optional)
     * @param limit Requested number of items to be provided in response (optional)
     * @param createdFrom Beginning date portion of a date range query to search for a matching set of items (optional)
     * @param createdTo Ending date portion of a date range query to search for a matching set of items (optional)
     * @param createdSince Retrieve the set of items created since this date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRmaCaseNotesAsync(String caseNumber, Integer offset, Integer limit, OffsetDateTime createdFrom, OffsetDateTime createdTo, OffsetDateTime createdSince, final ApiCallback<List<Note>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRmaCaseNotesValidateBeforeCall(caseNumber, offset, limit, createdFrom, createdTo, createdSince, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Note>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listRmaCases
     * @param fields Comma-separated properties to be provided in response (optional)
     * @param offset Requested index for start of items to be provided in response (optional)
     * @param limit Requested number of items to be provided in response (optional)
     * @param createdFrom Beginning date portion of a date range query to search for a matching set of items (optional)
     * @param createdTo Ending date portion of a date range query to search for a matching set of items (optional)
     * @param createdSince Retrieve the set of items created since this date (optional)
     * @param caseStatus Retrieve the set of cases with this status (optional)
     * @param vendorRmaNumber Retrieve the set of cases with this RMA number (optional)
     * @param includeNotes Use this flag to include Case Notes (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listRmaCasesCall(String fields, Integer offset, Integer limit, OffsetDateTime createdFrom, OffsetDateTime createdTo, OffsetDateTime createdSince, TacCaseStatus caseStatus, String vendorRmaNumber, Boolean includeNotes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/rmaCases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (createdFrom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdFrom", createdFrom));
        if (createdTo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdTo", createdTo));
        if (createdSince != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdSince", createdSince));
        if (caseStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("caseStatus", caseStatus));
        if (vendorRmaNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vendorRmaNumber", vendorRmaNumber));
        if (includeNotes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeNotes", includeNotes));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listRmaCasesValidateBeforeCall(String fields, Integer offset, Integer limit, OffsetDateTime createdFrom, OffsetDateTime createdTo, OffsetDateTime createdSince, TacCaseStatus caseStatus, String vendorRmaNumber, Boolean includeNotes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listRmaCasesCall(fields, offset, limit, createdFrom, createdTo, createdSince, caseStatus, vendorRmaNumber, includeNotes, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List or find RMA Cases
     * This operation list or find RMA Cases
     * @param fields Comma-separated properties to be provided in response (optional)
     * @param offset Requested index for start of items to be provided in response (optional)
     * @param limit Requested number of items to be provided in response (optional)
     * @param createdFrom Beginning date portion of a date range query to search for a matching set of items (optional)
     * @param createdTo Ending date portion of a date range query to search for a matching set of items (optional)
     * @param createdSince Retrieve the set of items created since this date (optional)
     * @param caseStatus Retrieve the set of cases with this status (optional)
     * @param vendorRmaNumber Retrieve the set of cases with this RMA number (optional)
     * @param includeNotes Use this flag to include Case Notes (optional, default to false)
     * @return List&lt;RmaCase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<RmaCase> listRmaCases(String fields, Integer offset, Integer limit, OffsetDateTime createdFrom, OffsetDateTime createdTo, OffsetDateTime createdSince, TacCaseStatus caseStatus, String vendorRmaNumber, Boolean includeNotes) throws ApiException {
        ApiResponse<List<RmaCase>> resp = listRmaCasesWithHttpInfo(fields, offset, limit, createdFrom, createdTo, createdSince, caseStatus, vendorRmaNumber, includeNotes);
        return resp.getData();
    }

    /**
     * List or find RMA Cases
     * This operation list or find RMA Cases
     * @param fields Comma-separated properties to be provided in response (optional)
     * @param offset Requested index for start of items to be provided in response (optional)
     * @param limit Requested number of items to be provided in response (optional)
     * @param createdFrom Beginning date portion of a date range query to search for a matching set of items (optional)
     * @param createdTo Ending date portion of a date range query to search for a matching set of items (optional)
     * @param createdSince Retrieve the set of items created since this date (optional)
     * @param caseStatus Retrieve the set of cases with this status (optional)
     * @param vendorRmaNumber Retrieve the set of cases with this RMA number (optional)
     * @param includeNotes Use this flag to include Case Notes (optional, default to false)
     * @return ApiResponse&lt;List&lt;RmaCase&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<RmaCase>> listRmaCasesWithHttpInfo(String fields, Integer offset, Integer limit, OffsetDateTime createdFrom, OffsetDateTime createdTo, OffsetDateTime createdSince, TacCaseStatus caseStatus, String vendorRmaNumber, Boolean includeNotes) throws ApiException {
        com.squareup.okhttp.Call call = listRmaCasesValidateBeforeCall(fields, offset, limit, createdFrom, createdTo, createdSince, caseStatus, vendorRmaNumber, includeNotes, null, null);
        Type localVarReturnType = new TypeToken<List<RmaCase>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List or find RMA Cases (asynchronously)
     * This operation list or find RMA Cases
     * @param fields Comma-separated properties to be provided in response (optional)
     * @param offset Requested index for start of items to be provided in response (optional)
     * @param limit Requested number of items to be provided in response (optional)
     * @param createdFrom Beginning date portion of a date range query to search for a matching set of items (optional)
     * @param createdTo Ending date portion of a date range query to search for a matching set of items (optional)
     * @param createdSince Retrieve the set of items created since this date (optional)
     * @param caseStatus Retrieve the set of cases with this status (optional)
     * @param vendorRmaNumber Retrieve the set of cases with this RMA number (optional)
     * @param includeNotes Use this flag to include Case Notes (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listRmaCasesAsync(String fields, Integer offset, Integer limit, OffsetDateTime createdFrom, OffsetDateTime createdTo, OffsetDateTime createdSince, TacCaseStatus caseStatus, String vendorRmaNumber, Boolean includeNotes, final ApiCallback<List<RmaCase>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listRmaCasesValidateBeforeCall(fields, offset, limit, createdFrom, createdTo, createdSince, caseStatus, vendorRmaNumber, includeNotes, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<RmaCase>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveRmaCase
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param fields Comma-separated properties to be provided in response (optional)
     * @param includeNotes Use this flag to include Case Notes (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveRmaCaseCall(String caseNumber, String fields, Boolean includeNotes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/rmaCases/{caseNumber}"
            .replaceAll("\\{" + "caseNumber" + "\\}", apiClient.escapeString(caseNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (includeNotes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeNotes", includeNotes));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveRmaCaseValidateBeforeCall(String caseNumber, String fields, Boolean includeNotes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'caseNumber' is set
        if (caseNumber == null) {
            throw new ApiException("Missing the required parameter 'caseNumber' when calling retrieveRmaCase(Async)");
        }
        
        com.squareup.okhttp.Call call = retrieveRmaCaseCall(caseNumber, fields, includeNotes, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves an RMA Case by ID
     * This operation retrieves a RmaCase entity. Attribute selection is enabled for all first level attributes.
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param fields Comma-separated properties to be provided in response (optional)
     * @param includeNotes Use this flag to include Case Notes (optional, default to false)
     * @return RmaCase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RmaCase retrieveRmaCase(String caseNumber, String fields, Boolean includeNotes) throws ApiException {
        ApiResponse<RmaCase> resp = retrieveRmaCaseWithHttpInfo(caseNumber, fields, includeNotes);
        return resp.getData();
    }

    /**
     * Retrieves an RMA Case by ID
     * This operation retrieves a RmaCase entity. Attribute selection is enabled for all first level attributes.
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param fields Comma-separated properties to be provided in response (optional)
     * @param includeNotes Use this flag to include Case Notes (optional, default to false)
     * @return ApiResponse&lt;RmaCase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RmaCase> retrieveRmaCaseWithHttpInfo(String caseNumber, String fields, Boolean includeNotes) throws ApiException {
        com.squareup.okhttp.Call call = retrieveRmaCaseValidateBeforeCall(caseNumber, fields, includeNotes, null, null);
        Type localVarReturnType = new TypeToken<RmaCase>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves an RMA Case by ID (asynchronously)
     * This operation retrieves a RmaCase entity. Attribute selection is enabled for all first level attributes.
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param fields Comma-separated properties to be provided in response (optional)
     * @param includeNotes Use this flag to include Case Notes (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveRmaCaseAsync(String caseNumber, String fields, Boolean includeNotes, final ApiCallback<RmaCase> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveRmaCaseValidateBeforeCall(caseNumber, fields, includeNotes, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RmaCase>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveRmaCaseAttachment
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param id The unique identifier of an entity. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveRmaCaseAttachmentCall(String caseNumber, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/rmaCases/{caseNumber}/attachments/{id}"
            .replaceAll("\\{" + "caseNumber" + "\\}", apiClient.escapeString(caseNumber.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveRmaCaseAttachmentValidateBeforeCall(String caseNumber, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'caseNumber' is set
        if (caseNumber == null) {
            throw new ApiException("Missing the required parameter 'caseNumber' when calling retrieveRmaCaseAttachment(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retrieveRmaCaseAttachment(Async)");
        }
        
        com.squareup.okhttp.Call call = retrieveRmaCaseAttachmentCall(caseNumber, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves an RMA Case Attachment by ID
     * This operation retrieves an RMA Case Attachment
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param id The unique identifier of an entity. (required)
     * @return List&lt;Attachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Attachment> retrieveRmaCaseAttachment(String caseNumber, String id) throws ApiException {
        ApiResponse<List<Attachment>> resp = retrieveRmaCaseAttachmentWithHttpInfo(caseNumber, id);
        return resp.getData();
    }

    /**
     * Retrieves an RMA Case Attachment by ID
     * This operation retrieves an RMA Case Attachment
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param id The unique identifier of an entity. (required)
     * @return ApiResponse&lt;List&lt;Attachment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Attachment>> retrieveRmaCaseAttachmentWithHttpInfo(String caseNumber, String id) throws ApiException {
        com.squareup.okhttp.Call call = retrieveRmaCaseAttachmentValidateBeforeCall(caseNumber, id, null, null);
        Type localVarReturnType = new TypeToken<List<Attachment>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves an RMA Case Attachment by ID (asynchronously)
     * This operation retrieves an RMA Case Attachment
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param id The unique identifier of an entity. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveRmaCaseAttachmentAsync(String caseNumber, String id, final ApiCallback<List<Attachment>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveRmaCaseAttachmentValidateBeforeCall(caseNumber, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Attachment>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveRmaCaseNote
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param id The unique identifier of an entity. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveRmaCaseNoteCall(String caseNumber, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/rmaCases/{caseNumber}/notes/{id}"
            .replaceAll("\\{" + "caseNumber" + "\\}", apiClient.escapeString(caseNumber.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveRmaCaseNoteValidateBeforeCall(String caseNumber, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'caseNumber' is set
        if (caseNumber == null) {
            throw new ApiException("Missing the required parameter 'caseNumber' when calling retrieveRmaCaseNote(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retrieveRmaCaseNote(Async)");
        }
        
        com.squareup.okhttp.Call call = retrieveRmaCaseNoteCall(caseNumber, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves an RMA Case Note by ID
     * This operation retrieves an RMA CaseNote. Attribute selection is enabled for all first level attributes.
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param id The unique identifier of an entity. (required)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Note retrieveRmaCaseNote(String caseNumber, String id) throws ApiException {
        ApiResponse<Note> resp = retrieveRmaCaseNoteWithHttpInfo(caseNumber, id);
        return resp.getData();
    }

    /**
     * Retrieves an RMA Case Note by ID
     * This operation retrieves an RMA CaseNote. Attribute selection is enabled for all first level attributes.
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param id The unique identifier of an entity. (required)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Note> retrieveRmaCaseNoteWithHttpInfo(String caseNumber, String id) throws ApiException {
        com.squareup.okhttp.Call call = retrieveRmaCaseNoteValidateBeforeCall(caseNumber, id, null, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves an RMA Case Note by ID (asynchronously)
     * This operation retrieves an RMA CaseNote. Attribute selection is enabled for all first level attributes.
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param id The unique identifier of an entity. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveRmaCaseNoteAsync(String caseNumber, String id, final ApiCallback<Note> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveRmaCaseNoteValidateBeforeCall(caseNumber, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateRmaCase
     * @param body Updated the associated RMA Case (required)
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateRmaCaseCall(RmaCase body, String caseNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/rmaCases/{caseNumber}"
            .replaceAll("\\{" + "caseNumber" + "\\}", apiClient.escapeString(caseNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRmaCaseValidateBeforeCall(RmaCase body, String caseNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateRmaCase(Async)");
        }
        // verify the required parameter 'caseNumber' is set
        if (caseNumber == null) {
            throw new ApiException("Missing the required parameter 'caseNumber' when calling updateRmaCase(Async)");
        }
        
        com.squareup.okhttp.Call call = updateRmaCaseCall(body, caseNumber, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates an RMA Case by ID
     * This operation updates a RmaCase entity. Attribute selection is enabled for all first level attributes.
     * @param body Updated the associated RMA Case (required)
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateRmaCase(RmaCase body, String caseNumber) throws ApiException {
        updateRmaCaseWithHttpInfo(body, caseNumber);
    }

    /**
     * Updates an RMA Case by ID
     * This operation updates a RmaCase entity. Attribute selection is enabled for all first level attributes.
     * @param body Updated the associated RMA Case (required)
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateRmaCaseWithHttpInfo(RmaCase body, String caseNumber) throws ApiException {
        com.squareup.okhttp.Call call = updateRmaCaseValidateBeforeCall(body, caseNumber, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates an RMA Case by ID (asynchronously)
     * This operation updates a RmaCase entity. Attribute selection is enabled for all first level attributes.
     * @param body Updated the associated RMA Case (required)
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateRmaCaseAsync(RmaCase body, String caseNumber, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRmaCaseValidateBeforeCall(body, caseNumber, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateRmaCaseNote
     * @param body Updated the associated TAC Case (required)
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param id The unique identifier of an entity. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateRmaCaseNoteCall(Note body, String caseNumber, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/rmaCases/{caseNumber}/notes/{id}"
            .replaceAll("\\{" + "caseNumber" + "\\}", apiClient.escapeString(caseNumber.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRmaCaseNoteValidateBeforeCall(Note body, String caseNumber, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateRmaCaseNote(Async)");
        }
        // verify the required parameter 'caseNumber' is set
        if (caseNumber == null) {
            throw new ApiException("Missing the required parameter 'caseNumber' when calling updateRmaCaseNote(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateRmaCaseNote(Async)");
        }
        
        com.squareup.okhttp.Call call = updateRmaCaseNoteCall(body, caseNumber, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates an RMA Case Note by ID
     * This operation updates an RMA Case Note. Attribute selection is enabled for all first level attributes.
     * @param body Updated the associated TAC Case (required)
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param id The unique identifier of an entity. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateRmaCaseNote(Note body, String caseNumber, String id) throws ApiException {
        updateRmaCaseNoteWithHttpInfo(body, caseNumber, id);
    }

    /**
     * Updates an RMA Case Note by ID
     * This operation updates an RMA Case Note. Attribute selection is enabled for all first level attributes.
     * @param body Updated the associated TAC Case (required)
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param id The unique identifier of an entity. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateRmaCaseNoteWithHttpInfo(Note body, String caseNumber, String id) throws ApiException {
        com.squareup.okhttp.Call call = updateRmaCaseNoteValidateBeforeCall(body, caseNumber, id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates an RMA Case Note by ID (asynchronously)
     * This operation updates an RMA Case Note. Attribute selection is enabled for all first level attributes.
     * @param body Updated the associated TAC Case (required)
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param id The unique identifier of an entity. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateRmaCaseNoteAsync(Note body, String caseNumber, String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRmaCaseNoteValidateBeforeCall(body, caseNumber, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for uploadRmaCaseAttachment
     * @param file  (required)
     * @param description  (required)
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadRmaCaseAttachmentCall(File file, String description, String caseNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/rmaCases/{caseNumber}/attachments"
            .replaceAll("\\{" + "caseNumber" + "\\}", apiClient.escapeString(caseNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);
        if (description != null)
        localVarFormParams.put("description", description);

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadRmaCaseAttachmentValidateBeforeCall(File file, String description, String caseNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling uploadRmaCaseAttachment(Async)");
        }
        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling uploadRmaCaseAttachment(Async)");
        }
        // verify the required parameter 'caseNumber' is set
        if (caseNumber == null) {
            throw new ApiException("Missing the required parameter 'caseNumber' when calling uploadRmaCaseAttachment(Async)");
        }
        
        com.squareup.okhttp.Call call = uploadRmaCaseAttachmentCall(file, description, caseNumber, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Upload an attachment to a specific RMA case
     * 
     * @param file  (required)
     * @param description  (required)
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @return InlineResponse201
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse201 uploadRmaCaseAttachment(File file, String description, String caseNumber) throws ApiException {
        ApiResponse<InlineResponse201> resp = uploadRmaCaseAttachmentWithHttpInfo(file, description, caseNumber);
        return resp.getData();
    }

    /**
     * Upload an attachment to a specific RMA case
     * 
     * @param file  (required)
     * @param description  (required)
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @return ApiResponse&lt;InlineResponse201&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse201> uploadRmaCaseAttachmentWithHttpInfo(File file, String description, String caseNumber) throws ApiException {
        com.squareup.okhttp.Call call = uploadRmaCaseAttachmentValidateBeforeCall(file, description, caseNumber, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse201>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload an attachment to a specific RMA case (asynchronously)
     * 
     * @param file  (required)
     * @param description  (required)
     * @param caseNumber Identifier of the Case. This may be an alias for the ID of the proxied Case. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadRmaCaseAttachmentAsync(File file, String description, String caseNumber, final ApiCallback<InlineResponse201> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadRmaCaseAttachmentValidateBeforeCall(file, description, caseNumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse201>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
